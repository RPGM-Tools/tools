// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from './client';
import type { GetData, GetResponses, GetApiAuthByAllData, GetApiAuthByAllResponses, PostApiDiscordInteractionsData, PostApiDiscordInteractionsResponses, PostApiForgeChatCompletionsData, PostApiForgeChatCompletionsResponses, GetApiForgeUsageData, GetApiForgeUsageResponses, GetApiListProductsData, GetApiListProductsResponses, GetApiPolyhedriumData, GetApiPolyhedriumResponses, GetApiPolyhedriumErrors, GetApiUserInfoData, GetApiUserInfoResponses, GetApiHubByFeatureData, GetApiHubByFeatureResponses, GetApiHubData, GetApiHubResponses, HeadApiHubData, HeadApiHubResponses, GetApiHubManifestData, GetApiHubManifestResponses, PostApiHubSyncVariablesData, PostApiHubSyncVariablesResponses, GetApiHubOpenapiData, GetApiHubOpenapiResponses, DeleteApiHubCacheByKeyData, DeleteApiHubCacheByKeyResponses, GetApiHubCacheByKeyData, GetApiHubCacheByKeyResponses, OptionsApiHubCacheByKeyData, OptionsApiHubCacheByKeyResponses, OptionsApiHubCacheBatchDeleteData, OptionsApiHubCacheBatchDeleteResponses, PostApiHubCacheBatchDeleteData, PostApiHubCacheBatchDeleteResponses, DeleteApiHubCacheClearByBaseData, DeleteApiHubCacheClearByBaseResponses, OptionsApiHubCacheClearByBaseData, OptionsApiHubCacheClearByBaseResponses, GetApiHubCacheData, GetApiHubCacheResponses, PostApiHubDatabaseByCommandData, PostApiHubDatabaseByCommandResponses, OptionsApiHubDatabaseQueryData, OptionsApiHubDatabaseQueryResponses, PostApiHubDatabaseQueryData, PostApiHubDatabaseQueryResponses, GetApiHubKvByPathData, GetApiHubKvByPathResponses, GetNuxtErrorData, GetNuxtErrorResponses, GetNuxtIslandBy__param1Data, GetNuxtIslandBy__param1Responses, GetApiHubOpenapiJsonData, GetApiHubOpenapiJsonResponses, GetApiHubScalarData, GetApiHubScalarResponses } from './types.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const get = <ThrowOnError extends boolean = false>(options?: Options<GetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetResponses, unknown, ThrowOnError>({
        url: '',
        ...options
    });
};

export const getApiAuthByAll = <ThrowOnError extends boolean = false>(options: Options<GetApiAuthByAllData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiAuthByAllResponses, unknown, ThrowOnError>({
        url: '/api/auth/{all}',
        ...options
    });
};

export const postApiDiscordInteractions = <ThrowOnError extends boolean = false>(options?: Options<PostApiDiscordInteractionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiDiscordInteractionsResponses, unknown, ThrowOnError>({
        url: '/api/discord/interactions',
        ...options
    });
};

export const postApiForgeChatCompletions = <ThrowOnError extends boolean = false>(options?: Options<PostApiForgeChatCompletionsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiForgeChatCompletionsResponses, unknown, ThrowOnError>({
        url: '/api/forge/chat/completions',
        ...options
    });
};

export const getApiForgeUsage = <ThrowOnError extends boolean = false>(options?: Options<GetApiForgeUsageData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiForgeUsageResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/forge/usage',
        ...options
    });
};

export const getApiListProducts = <ThrowOnError extends boolean = false>(options?: Options<GetApiListProductsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiListProductsResponses, unknown, ThrowOnError>({
        url: '/api/list-products',
        ...options
    });
};

/**
 * Get the polyhedrium balance of the authenticated user
 */
export const getApiPolyhedrium = <ThrowOnError extends boolean = false>(options?: Options<GetApiPolyhedriumData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiPolyhedriumResponses, GetApiPolyhedriumErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/polyhedrium',
        ...options
    });
};

/**
 * Get information about the authenticated user
 */
export const getApiUserInfo = <ThrowOnError extends boolean = false>(options?: Options<GetApiUserInfoData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiUserInfoResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/user-info',
        ...options
    });
};

export const getApiHubByFeature = <ThrowOnError extends boolean = false>(options: Options<GetApiHubByFeatureData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiHubByFeatureResponses, unknown, ThrowOnError>({
        url: '/api/_hub/{feature}',
        ...options
    });
};

export const getApiHub = <ThrowOnError extends boolean = false>(options?: Options<GetApiHubData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiHubResponses, unknown, ThrowOnError>({
        url: '/api/_hub',
        ...options
    });
};

export const headApiHub = <ThrowOnError extends boolean = false>(options?: Options<HeadApiHubData, ThrowOnError>) => {
    return (options?.client ?? client).head<HeadApiHubResponses, unknown, ThrowOnError>({
        url: '/api/_hub',
        ...options
    });
};

export const getApiHubManifest = <ThrowOnError extends boolean = false>(options?: Options<GetApiHubManifestData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiHubManifestResponses, unknown, ThrowOnError>({
        url: '/api/_hub/manifest',
        ...options
    });
};

export const postApiHubSyncVariables = <ThrowOnError extends boolean = false>(options?: Options<PostApiHubSyncVariablesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiHubSyncVariablesResponses, unknown, ThrowOnError>({
        url: '/api/_hub/sync-variables',
        ...options
    });
};

export const getApiHubOpenapi = <ThrowOnError extends boolean = false>(options?: Options<GetApiHubOpenapiData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiHubOpenapiResponses, unknown, ThrowOnError>({
        url: '/api/_hub/openapi',
        ...options
    });
};

export const deleteApiHubCacheByKey = <ThrowOnError extends boolean = false>(options: Options<DeleteApiHubCacheByKeyData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiHubCacheByKeyResponses, unknown, ThrowOnError>({
        url: '/api/_hub/cache/{key}',
        ...options
    });
};

export const getApiHubCacheByKey = <ThrowOnError extends boolean = false>(options: Options<GetApiHubCacheByKeyData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiHubCacheByKeyResponses, unknown, ThrowOnError>({
        url: '/api/_hub/cache/{key}',
        ...options
    });
};

export const optionsApiHubCacheByKey = <ThrowOnError extends boolean = false>(options: Options<OptionsApiHubCacheByKeyData, ThrowOnError>) => {
    return (options.client ?? client).options<OptionsApiHubCacheByKeyResponses, unknown, ThrowOnError>({
        url: '/api/_hub/cache/{key}',
        ...options
    });
};

export const optionsApiHubCacheBatchDelete = <ThrowOnError extends boolean = false>(options?: Options<OptionsApiHubCacheBatchDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).options<OptionsApiHubCacheBatchDeleteResponses, unknown, ThrowOnError>({
        url: '/api/_hub/cache/batch-delete',
        ...options
    });
};

export const postApiHubCacheBatchDelete = <ThrowOnError extends boolean = false>(options?: Options<PostApiHubCacheBatchDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiHubCacheBatchDeleteResponses, unknown, ThrowOnError>({
        url: '/api/_hub/cache/batch-delete',
        ...options
    });
};

export const deleteApiHubCacheClearByBase = <ThrowOnError extends boolean = false>(options: Options<DeleteApiHubCacheClearByBaseData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiHubCacheClearByBaseResponses, unknown, ThrowOnError>({
        url: '/api/_hub/cache/clear/{base}',
        ...options
    });
};

export const optionsApiHubCacheClearByBase = <ThrowOnError extends boolean = false>(options: Options<OptionsApiHubCacheClearByBaseData, ThrowOnError>) => {
    return (options.client ?? client).options<OptionsApiHubCacheClearByBaseResponses, unknown, ThrowOnError>({
        url: '/api/_hub/cache/clear/{base}',
        ...options
    });
};

export const getApiHubCache = <ThrowOnError extends boolean = false>(options?: Options<GetApiHubCacheData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiHubCacheResponses, unknown, ThrowOnError>({
        url: '/api/_hub/cache',
        ...options
    });
};

export const postApiHubDatabaseByCommand = <ThrowOnError extends boolean = false>(options: Options<PostApiHubDatabaseByCommandData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiHubDatabaseByCommandResponses, unknown, ThrowOnError>({
        url: '/api/_hub/database/{command}',
        ...options
    });
};

export const optionsApiHubDatabaseQuery = <ThrowOnError extends boolean = false>(options?: Options<OptionsApiHubDatabaseQueryData, ThrowOnError>) => {
    return (options?.client ?? client).options<OptionsApiHubDatabaseQueryResponses, unknown, ThrowOnError>({
        url: '/api/_hub/database/query',
        ...options
    });
};

export const postApiHubDatabaseQuery = <ThrowOnError extends boolean = false>(options?: Options<PostApiHubDatabaseQueryData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiHubDatabaseQueryResponses, unknown, ThrowOnError>({
        url: '/api/_hub/database/query',
        ...options
    });
};

export const getApiHubKvByPath = <ThrowOnError extends boolean = false>(options: Options<GetApiHubKvByPathData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiHubKvByPathResponses, unknown, ThrowOnError>({
        url: '/api/_hub/kv/{path}',
        ...options
    });
};

export const getNuxtError = <ThrowOnError extends boolean = false>(options?: Options<GetNuxtErrorData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNuxtErrorResponses, unknown, ThrowOnError>({
        url: '/__nuxt_error',
        ...options
    });
};

export const getNuxtIslandBy__param1 = <ThrowOnError extends boolean = false>(options: Options<GetNuxtIslandBy__param1Data, ThrowOnError>) => {
    return (options.client ?? client).get<GetNuxtIslandBy__param1Responses, unknown, ThrowOnError>({
        url: '/__nuxt_island/{*param1}',
        ...options
    });
};

export const getApiHubOpenapiJson = <ThrowOnError extends boolean = false>(options?: Options<GetApiHubOpenapiJsonData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiHubOpenapiJsonResponses, unknown, ThrowOnError>({
        url: '/api/_hub/openapi.json',
        ...options
    });
};

export const getApiHubScalar = <ThrowOnError extends boolean = false>(options?: Options<GetApiHubScalarData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiHubScalarResponses, unknown, ThrowOnError>({
        url: '/api/_hub/scalar',
        ...options
    });
};
